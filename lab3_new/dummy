        # self.pima["pregnant"].hist(edgecolor="black")

 # if row["bmi"] < 18.5:
        #     return "underweight"
        # elif row["bmi"] >= 18.5 and row["bmi"] < 25:
        #     return "normal"
        # elif row["bmi"] >= 25 and row["bmi"] < 30:
        #     return "overweight"
        # else:
        #     return "obesity"

    # def set_insulin(self, row):
    #     if row["insulin"] >= 16 and row["insulin"] <= 166:
    #         return "Normal"
    #     else:
    #         return "Abnormal"

    # self.pima = self.pima.assign(
        #     newGlucose=self.pima.apply(self.set_glucose, axis=1))
        # self.pima = self.pima.assign(
        #     newBmi=self.pima.apply(self.set_bmi, axis=1))

        # self.pima = self.pima.assign(
        #     newInsulin=self.pima.apply(self.set_insulin, axis=1))

# # feature_cols = ['pregnant', 'insulin', 'bmi', 'age']
        # feature_cols = ['pregnant', 'insulin', 'bmi', 'age', 'pedigree']
        # X = self.pima[feature_cols]
        # y = self.pima.label
        # return X, y

 # X, y = self.define_feature()
        # for k in range(2, 11):
        #     kfold = KFold(n_splits=k, random_state=100, shuffle=True)
        #     model_kfold = LogisticRegression()
        #     results_kfold = model_selection.cross_val_score(
        #         model_kfold, X, y, cv=kfold)
        #     print("Accuracy: %.2f%%" % (results_kfold.mean()*100.0))
        # model_kfold.fit(X, y)
        # return model_kfold
        
